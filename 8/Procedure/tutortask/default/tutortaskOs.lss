
tutortask.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000133  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011b  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008a  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	13 c0       	rjmp	.+38     	; 0x2a <__bad_interrupt>
   4:	12 c0       	rjmp	.+36     	; 0x2a <__bad_interrupt>
   6:	11 c0       	rjmp	.+34     	; 0x2a <__bad_interrupt>
   8:	10 c0       	rjmp	.+32     	; 0x2a <__bad_interrupt>
   a:	0f c0       	rjmp	.+30     	; 0x2a <__bad_interrupt>
   c:	0e c0       	rjmp	.+28     	; 0x2a <__bad_interrupt>
   e:	0d c0       	rjmp	.+26     	; 0x2a <__bad_interrupt>
  10:	0c c0       	rjmp	.+24     	; 0x2a <__bad_interrupt>
  12:	0b c0       	rjmp	.+22     	; 0x2a <__bad_interrupt>
  14:	0a c0       	rjmp	.+20     	; 0x2a <__bad_interrupt>
  16:	09 c0       	rjmp	.+18     	; 0x2a <__bad_interrupt>
  18:	08 c0       	rjmp	.+16     	; 0x2a <__bad_interrupt>

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e5       	ldi	r28, 0x5F	; 95
  20:	d2 e0       	ldi	r29, 0x02	; 2
  22:	de bf       	out	0x3e, r29	; 62
  24:	cd bf       	out	0x3d, r28	; 61
  26:	02 d0       	rcall	.+4      	; 0x2c <main>
  28:	3b c0       	rjmp	.+118    	; 0xa0 <_exit>

0000002a <__bad_interrupt>:
  2a:	ea cf       	rjmp	.-44     	; 0x0 <__vectors>

0000002c <main>:
	** DDD4 is equal to the value 4. (These constants
	** are defined in a header file included by avr/io.h.)s
	** The names are the same as those given in the
	** datasheet for each bit position.
	*/
	DDRD = (1<<DDD5) | (1<<DDD4);
  2c:	80 e3       	ldi	r24, 0x30	; 48
  2e:	81 bb       	out	0x11, r24	; 17

	/* Set PORT D Pin 4 output to zero */
	/*<-YOUR CODE HERE->*/
	PORTD = 0; /* both 4 and 5 will go to 0 but OK */
  30:	12 ba       	out	0x12, r1	; 18

	/* Set OC1A pin to toggle */
	/*<-YOUR CODE HERE->*/
	TCCR1A = 0x40;
  32:	80 e4       	ldi	r24, 0x40	; 64
  34:	8f bd       	out	0x2f, r24	; 47

	/* Set Output Compare 1 value */
    OCR1A = 1999;
  36:	8f ec       	ldi	r24, 0xCF	; 207
  38:	97 e0       	ldi	r25, 0x07	; 7
  3a:	9b bd       	out	0x2b, r25	; 43
  3c:	8a bd       	out	0x2a, r24	; 42
	*  but C allows us to treat OCR1A as a single 16 bit register
	*/

	/* Set Timer 1 to clear on compare match */
	/*<-YOUR CODE HERE->*/
	TCCR1B = 0x08;
  3e:	88 e0       	ldi	r24, 0x08	; 8
  40:	8e bd       	out	0x2e, r24	; 46


	/* initialize timer as OFF */
	TCCR1B |= 0x00;
  42:	8e b5       	in	r24, 0x2e	; 46
  44:	8e bd       	out	0x2e, r24	; 46

	/* set PORT A direction to input */
	DDRA = 0x00;
  46:	1a ba       	out	0x1a, r1	; 26

	/* Sit back and let it happen - the hardware takes care of it all */
	while(1){
		if((PINA & 0x01) == 0x00){
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 3033;
  48:	e9 ed       	ldi	r30, 0xD9	; 217
  4a:	fb e0       	ldi	r31, 0x0B	; 11
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 4049;
		}
		else if((PINA & 0x08) == 0x00){
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 4545;
  4c:	61 ec       	ldi	r22, 0xC1	; 193
  4e:	71 e1       	ldi	r23, 0x11	; 17
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 3607;
		}
		else if((PINA & 0x04) == 0x00){
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 4049;
  50:	41 ed       	ldi	r20, 0xD1	; 209
  52:	5f e0       	ldi	r21, 0x0F	; 15
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 3033;
		}
		else if((PINA & 0x02) == 0x00){
			TCCR1B |= 0x01; /* set timer to toggle on clock */
			OCR1A = 3607;
  54:	27 e1       	ldi	r18, 0x17	; 23
  56:	3e e0       	ldi	r19, 0x0E	; 14
	/* set PORT A direction to input */
	DDRA = 0x00;

	/* Sit back and let it happen - the hardware takes care of it all */
	while(1){
		if((PINA & 0x01) == 0x00){
  58:	c8 99       	sbic	0x19, 0	; 25
  5a:	06 c0       	rjmp	.+12     	; 0x68 <__SREG__+0x29>
			TCCR1B |= 0x01; /* set timer to toggle on clock */
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	81 60       	ori	r24, 0x01	; 1
  60:	8e bd       	out	0x2e, r24	; 46
			OCR1A = 3033;
  62:	fb bd       	out	0x2b, r31	; 43
  64:	ea bd       	out	0x2a, r30	; 42
  66:	f8 cf       	rjmp	.-16     	; 0x58 <__SREG__+0x19>
		}
		else if((PINA & 0x02) == 0x00){
  68:	c9 99       	sbic	0x19, 1	; 25
  6a:	06 c0       	rjmp	.+12     	; 0x78 <__SREG__+0x39>
			TCCR1B |= 0x01; /* set timer to toggle on clock */
  6c:	8e b5       	in	r24, 0x2e	; 46
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8e bd       	out	0x2e, r24	; 46
			OCR1A = 3607;
  72:	3b bd       	out	0x2b, r19	; 43
  74:	2a bd       	out	0x2a, r18	; 42
  76:	f0 cf       	rjmp	.-32     	; 0x58 <__SREG__+0x19>
		}
		else if((PINA & 0x04) == 0x00){
  78:	ca 99       	sbic	0x19, 2	; 25
  7a:	06 c0       	rjmp	.+12     	; 0x88 <__SREG__+0x49>
			TCCR1B |= 0x01; /* set timer to toggle on clock */
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8e bd       	out	0x2e, r24	; 46
			OCR1A = 4049;
  82:	5b bd       	out	0x2b, r21	; 43
  84:	4a bd       	out	0x2a, r20	; 42
  86:	e8 cf       	rjmp	.-48     	; 0x58 <__SREG__+0x19>
		}
		else if((PINA & 0x08) == 0x00){
  88:	cb 99       	sbic	0x19, 3	; 25
  8a:	06 c0       	rjmp	.+12     	; 0x98 <__SREG__+0x59>
			TCCR1B |= 0x01; /* set timer to toggle on clock */
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8e bd       	out	0x2e, r24	; 46
			OCR1A = 4545;
  92:	7b bd       	out	0x2b, r23	; 43
  94:	6a bd       	out	0x2a, r22	; 42
  96:	e0 cf       	rjmp	.-64     	; 0x58 <__SREG__+0x19>
		}
		else
			TCCR1B &= 0xFE;
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	8e bd       	out	0x2e, r24	; 46
  9e:	dc cf       	rjmp	.-72     	; 0x58 <__SREG__+0x19>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
