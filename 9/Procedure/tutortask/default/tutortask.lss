
tutortask.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000047  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000128  00000000  00000000  0000019b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cd  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000115  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__vector_9>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e5       	ldi	r28, 0x5F	; 95
  20:	d2 e0       	ldi	r29, 0x02	; 2
  22:	de bf       	out	0x3e, r29	; 62
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ee eb       	ldi	r30, 0xBE	; 190
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	03 c0       	rjmp	.+6      	; 0x38 <.do_copy_data_start>

00000032 <.do_copy_data_loop>:
  32:	c8 95       	lpm
  34:	31 96       	adiw	r30, 0x01	; 1
  36:	0d 92       	st	X+, r0

00000038 <.do_copy_data_start>:
  38:	a2 36       	cpi	r26, 0x62	; 98
  3a:	b1 07       	cpc	r27, r17
  3c:	d1 f7       	brne	.-12     	; 0x32 <.do_copy_data_loop>
  3e:	02 d0       	rcall	.+4      	; 0x44 <main>
  40:	3c c0       	rjmp	.+120    	; 0xba <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <main>:
	** DDD4 is equal to the value 4. (These constants
	** are defined in a header file included by avr/io.h.)s
	** The names are the same as those given in the
	** datasheet for each bit position.
	*/
	DDRD = (1<<DDD5) | (1<<DDD4);
  44:	80 e3       	ldi	r24, 0x30	; 48
  46:	81 bb       	out	0x11, r24	; 17

	/* Set PORT D Pin 4 output to zero */
	PORTD = 0; /* both 4 and 5 will go to 0 but OK */
  48:	12 ba       	out	0x12, r1	; 18

	/* Set OC1A pin to toggle */
	TCCR1A = 0x40;
  4a:	80 e4       	ldi	r24, 0x40	; 64
  4c:	8f bd       	out	0x2f, r24	; 47

	/* Set Output Compare 1 value */
    OCR1A = 0x1000;
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e1       	ldi	r25, 0x10	; 16
  52:	9b bd       	out	0x2b, r25	; 43
  54:	8a bd       	out	0x2a, r24	; 42

	/* Set up timer 1 so that it will clear on compare match */
	TCCR1B = (1<<CTC1)|(0<<CS12)|(0<<CS11)|(1<<CS10);
  56:	89 e0       	ldi	r24, 0x09	; 9
  58:	8e bd       	out	0x2e, r24	; 46

	/* Set prescaler to CK*/
	//TCCR1B |= (0<<CS12)|(0<<CS11)|(1<<CS10);

	/* Start the timer */
	TCCR1B |= 0x01;
  5a:	8e b5       	in	r24, 0x2e	; 46
  5c:	81 60       	ori	r24, 0x01	; 1
  5e:	8e bd       	out	0x2e, r24	; 46
	
	/* Set the baud rate to 19200 - see page 58 of the datasheet
	** to see what value to write to the UBRR register when we 
	** have a 4MHz clock
	*/
	UBRR = 12;
  60:	8c e0       	ldi	r24, 0x0C	; 12
  62:	89 b9       	out	0x09, r24	; 9
	/* UCR = UART Controll Register
	   RXEN = Reciever Enable, TXEN, Transmitter Enable
	   UDRIE = Data Register Empty Interrupt Enable
	   RXCIE = Receive Complete Interrupt Enable
	*/
	UCR = (1<<RXEN)|(1<<RXCIE);
  64:	80 e9       	ldi	r24, 0x90	; 144
  66:	8a b9       	out	0x0a, r24	; 10

	/* Enable interrupts */
	sei();
  68:	78 94       	sei
  6a:	ff cf       	rjmp	.-2      	; 0x6a <main+0x26>

0000006c <update_OCR1A>:
	for (;;) {
	}
}

void update_OCR1A(char h, char l) {
	OCR1AH = h;
  6c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = l;
  6e:	6a bd       	out	0x2a, r22	; 42
}
  70:	08 95       	ret

00000072 <__vector_9>:
		
/*
 * Define the interrupt handler for UART Receive Complete - i.e. a new
 * character has arrived in the UART Data Register (UDR).
 */
ISR(UART_RX_vect) {
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
	** variable
	*/

	/*When writing to the register, the UART Transmit Data register is written.
	  When reading from UDR, the UART Receive Data register is read.*/
	input = UDR;
  80:	9c b1       	in	r25, 0x0c	; 12

	/* check if high and low are already set.
	   if they are, clear them both and put the new input
	   into the high and clear low */
	if( h && l){
  82:	80 91 60 00 	lds	r24, 0x0060
  86:	88 23       	and	r24, r24
  88:	49 f0       	breq	.+18     	; 0x9c <__vector_9+0x2a>
  8a:	80 91 61 00 	lds	r24, 0x0061
  8e:	88 23       	and	r24, r24
  90:	29 f0       	breq	.+10     	; 0x9c <__vector_9+0x2a>
		h = input;
  92:	90 93 60 00 	sts	0x0060, r25
		l = 0;
  96:	10 92 61 00 	sts	0x0061, r1
  9a:	08 c0       	rjmp	.+16     	; 0xac <__vector_9+0x3a>
	} else {
		/* put the input into low and update OCR1A */
	    l = input;
  9c:	90 93 61 00 	sts	0x0061, r25
		update_OCR1A(h, l);
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
	for (;;) {
	}
}

void update_OCR1A(char h, char l) {
	OCR1AH = h;
  a8:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = l;
  aa:	9a bd       	out	0x2a, r25	; 42
	} else {
		/* put the input into low and update OCR1A */
	    l = input;
		update_OCR1A(h, l);
	}
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
